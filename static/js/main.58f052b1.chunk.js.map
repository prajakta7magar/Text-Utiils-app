{"version":3,"sources":["../../my-app/src/Components/Navbar.js","../../my-app/src/Components/TextForm.js","../../my-app/src/Components/Alert.js","../../my-app/src/App.js","../../my-app/src/reportWebVitals.js","../../my-app/src/index.js"],"names":["Navbar","props","React","createElement","className","mode","theme","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","onClick","toggleswitch","id","htmlFor","toggleswitch1","TextForm","Text","setText","useState","isFirstCheckDone","setIsFirstCheckDone","btnText","setBtnText","currentModeStyles","backgroundColor","color","currentThemeStyles","combinedStyles","padding","border","Fragment","style","heading","value","onChange","event","target","rows","handleOnClick","test","alert","toUpperCase","toLowerCase","showalert","handleOnClear","handleOnCopy","text","document","getElementById","select","navigator","clipboard","writeText","handleOnReplace","split","filter","word","length","replace","defaultProps","about","Alert","role","lower","charAt","slice","capitalize","msg","App","setMode","setTheme","setAlert","showAlert","message","setTimeout","toggleSwitch","body","toggleSwitch1","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.58f052b1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} ${props.theme} bg-${props.mode} ${props.theme}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/TextForm\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        {/* Light/Dark Mode Toggle */}\r\n        <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleswitch} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n          <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\">\r\n            Enable Dark Mode\r\n          </label>\r\n        </div>\r\n\r\n        {/* Green Mode Toggle */}\r\n        <div className={`form-check form-switch text-${props.theme === 'light' ? 'dark' : 'light'} ps-5 ms-4`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleswitch1} type=\"checkbox\" id=\"flexSwitchCheckGreenMode\" />\r\n          <label className={`form-check-label text-${props.theme === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckGreenMode\">\r\n            Enable Green Mode\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n  mode: PropTypes.string.isRequired, // Mode should be required\r\n  theme: PropTypes.string.isRequired, // Ensure theme prop is passed in\r\n  toggleswitch: PropTypes.func.isRequired, // Add validation for toggleswitch prop\r\n  toggleswitch1: PropTypes.func.isRequired // Add validation for toggleswitch1 prop\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Title here\",\r\n  about: \"About us\",\r\n  theme: \"light\" // Default theme\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n  const [Text, setText] = useState('');\r\n  const [isFirstCheckDone, setIsFirstCheckDone] = useState(false);\r\n  const [btnText, setBtnText] = useState('Convert to Uppercase');\r\n\r\n  const handleOnClick = () => {\r\n    if (!isFirstCheckDone && /[A-Z]/.test(Text)) {\r\n      alert('Your text already contains uppercase letters');\r\n      setIsFirstCheckDone(true);\r\n      setBtnText('Convert to Lowercase');\r\n    } else {\r\n      if (Text === Text.toUpperCase()) {\r\n        setText(Text.toLowerCase());\r\n        setBtnText('Convert to Uppercase');\r\n        props.showalert(\"Converted to Lowercase\", \"success\");\r\n      } else {\r\n        setText(Text.toUpperCase());\r\n        setBtnText('Convert to Lowercase');\r\n        props.showalert(\"Converted to Uppercase\", \"success\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOnClear = () => {\r\n    setText('');\r\n    props.showalert(\"Text is cleared\", \"success\");\r\n  };\r\n\r\n  const handleOnCopy = () => {\r\n    let text = document.getElementById(\"mybox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text is copied\", \"success\");\r\n  };\r\n\r\n  const handleOnReplace = () => {\r\n    setText('No text to replace');\r\n    props.showalert(\"Text is replaced\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // Mode and Theme Styling\r\n  const darkModeStyles = {\r\n    backgroundColor: '#333',\r\n    color: 'white',\r\n  };\r\n\r\n  const lightModeStyles = {\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n  };\r\n\r\n  const greenThemeStyles = {\r\n    backgroundColor: 'green',\r\n    color: 'white',\r\n  };\r\n\r\n  const lightGreenThemeStyles = {\r\n    backgroundColor: 'white',\r\n    color: 'black',\r\n  };\r\n\r\n  const currentModeStyles = props.mode === 'dark' ? darkModeStyles : lightModeStyles;\r\n  const currentThemeStyles = props.theme === 'green' ? greenThemeStyles : lightGreenThemeStyles;\r\n\r\n  const combinedStyles = {\r\n    ...currentModeStyles,\r\n    ...currentThemeStyles,\r\n    padding: '10px',\r\n    border: '1px solid',\r\n  };\r\n\r\n  const characterCount = (text) => text.replace(/\\s/g, '').length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-4\" style={{ color: currentModeStyles.color }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"mybox\"\r\n            value={Text}\r\n            onChange={handleOnChange}\r\n            rows=\"8\"\r\n            style={combinedStyles}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleOnClick}>\r\n          {btnText}\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleOnClear}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleOnCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={handleOnReplace}>\r\n          Replace\r\n        </button>\r\n      </div>\r\n\r\n      {/* Text Summary Section */}\r\n      <div className=\"container my-3\" style={currentModeStyles}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{Text.split(/\\s+/).filter((word) => word.length !== 0).length} words and {characterCount(Text)} characters</p>\r\n        <p>{0.008 * Text.split(/\\s+/).filter((word) => word.length !== 0).length} minutes read</p>\r\n      </div>\r\n\r\n      {/* Preview Section */}\r\n      <div className=\"container my-3\" style={currentModeStyles}>\r\n        <h2>Preview</h2>\r\n        <p>{Text.length > 0 ? Text : 'Nothing to preview'}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    const capitalize=(word)=>\r\n    {\r\n    const lower=word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n     props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show `}role=\"alert\">\r\n     <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n \r\n</div>\r\n    \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import { useState } from 'react';\nimport React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar.js';\n/*import About from './Components/About.js';*/\nimport TextForm from './Components/TextForm.js';\nimport Alert from './Components/Alert.js';\n/*import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";*/\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [theme, setTheme] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n\n  const toggleSwitch = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark mode has been enabled\", \"warning\");\n      document.title = 'TextUtils - Dark Mode';\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n\n  const toggleSwitch1 = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n      document.body.style.backgroundColor = 'green';\n      document.title = 'TextUtils - Green Mode';\n    } else {\n      setTheme('light');\n      document.body.style.backgroundColor = 'white';\n      document.title = 'TextUtils - Light Mode';\n    }\n  };\n\n  return (\n    <>\n     { /*<Router>*/}\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleSwitch={toggleSwitch}\n          theme={theme}\n          toggleSwitch1={toggleSwitch1}\n          about=\"About TextUtils\"\n        />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n         { /*<Routes>\n            <Route path=\"/About\" element={<About />} />\n            <Route path=\"/TextForm\" element={*/}\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n              />\n           </div> \n          {/*</Routes>\n        cd\n      </Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}